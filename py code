# Import the packages we will use into use in this project

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import matplotlib
plt.style.use('ggplot')
from matplotlib.pyplot import figure

%matplotlib inline
matplotlib.rcParams['figure.figsize'] = (12,8)

pd.options.mode.chained_assignment = None

# Read in the data
df = pd.read_csv('transData.csv')
df2 = pd.read_csv('testSamples.csv')

print(df.info())

print(df2.info())


# Data Types of the columns

print(df.dtypes)
print(df2.dtypes)

df.drop_duplicates()


df2.drop_duplicates()

#Total count of members
df2.count()

#count of Control Group
df2[df2.test_group==0].count()

#count of test group
df2[df2.test_group == 1].count()

#Fractional Distribution in Test Group
p_test = (14835/59721)
print("Fractional Distribution of Test Group:",round(p_test,5))

#Percentage in Test Group
print("Test Group Percentage:", round(p_test* 100,2))

#Fractional Distribution in Control Group
p_control = (44886/59721) 
print("Fraction Distribution of Control Group:",round(p_control,5))

#Percentage in Control Group
print("Control Group Pecentage:",round(p_control* 100,2))

# Q1: What is the aproximate probability distribution between the test group and the control group
# Answer: 

# Total number of members: 59721 (100%) 
# NUmber of members in Control Group: 44886 (~75%) (Factional Distribution 0.75)
# Number of members in Test Group: 14835 (~25%) (Factional Distribution 0.25)

# Visual of Distribution

fig, ax = plt.subplots()
x = df2.groupby("test_group").size().plot(kind = "bar",
                                      title = "Group Distribution", 
                                      width= 0.25)
ax.set_xticklabels(["Control", "Test"], rotation="horizontal")

plt.show()


df_merge = pd.merge(df, df2, on = "sample_id")

#Merge based on Control and Test

df_control = df_merge[df_merge["test_group"]==0]
df_test = df_merge[df_merge["test_group"]==1]

#Total number of Trasactions under the Control Group
number_control = len(df_control)
print("Total number of trasactions in Control Group:", number_control)

#Total number of Trasactions under the Test Group
number_test = len(df_test)
print("Total number of transactions in Test Group:", number_test)


fig, ax1 = plt.subplots()
Chargeback_control, Rebill_control, Refund_control = df_control.groupby("transaction_type").size()

df_control.groupby("transaction_type").size().plot(kind = "bar",
                                                  #title = "Transaction Types in Control Group",
                                                    width= 0.25)
ax1.set_xticklabels(["Chargeback_test", "Rebill_test", "Refund_test"], rotation="horizontal")
plt.show()

# Rebill Ratio in Control and Test: 

Rebill_Control_Ratio = Rebill_control/number_control
print("Rebill_Control_Ratio:", Rebill_Control_Ratio)

Rebill_Test_Ratio = Rebill_test/number_test
print("Rebill_Test_Ratio:",Rebill_Test_Ratio)


fig, ax2 = plt.subplots()
Chargeback_test, Rebill_test, Refund_test = df_test.groupby("transaction_type").size()
df_test.groupby("transaction_type").size().plot(kind = "bar",
                                                  title = "Transaction Types in Test Group",
                                               width= 0.25)
ax2.set_xticklabels(["Chargeback_test", "Rebill_test", "Refund_test"], rotation="horizontal")
plt.show()

# Rebill Ratio in Test Type: 
Rebill_Test_Ratio = Rebill_test/number_test
Rebill_Test_Ratio

#Q2: Is a user that must call-in to cancel more likely to generate at least 1 addition REBILL?

#A2:

print("Is Rebill Ratio for Test group greater than Rebill Ratio of Control group? OR", Rebill_Test_Ratio,">"
      , Rebill_Control_Ratio, "?")
print(Rebill_Test_Ratio > Rebill_Control_Ratio)
 
# As the rebill ratio for the test group is greater than the rebill ratio for the control group, it is more 
# likely that the user that calls in will generate atleast 1 additional Rebill. 

#Q3: Is a user that must call-in to cancel more likely to generate more revenues?

total_revenue = df['transaction_amount'].sum()
print("Total Revenue Generated:",round(total_revenue,5))

df_revenue_test = df_test.groupby("sample_id")
Revenue_test = df_revenue_test['transaction_amount'].sum()

mean_test = Revenue_test.mean()
print("Average revenue generated by Test Group:",round(mean_test,5))

df_revenue_control = df_control.groupby("sample_id")
Revenue_control = df_revenue_control['transaction_amount'].sum()

mean_control = Revenue_control.mean()
print("Average revenue generated by Control Group:",round(mean_control,5))

#A3: The average revenue generated by the test group is less than the average revenue generated by the control group.
# Therefore users that calls in wont most likely generate more revenues. 

#Q4: Is a user that must call-in more likely to produce a higher chargeback rate(CHARGEBACKs/REBILLs)?

test_chargeback_rate = Chargeback_test/Rebill_test
control_chargeback_rate = Chargeback_control/Rebill_control
print("Is a user that must call-in more likely to produce a higher chargeback rate(CHARGEBACKs/REBILLs)")
print(test_chargeback_rate > control_chargeback_rate)


#A4: The rate of chargeback of the control group is higher than the rate of chargeback in the test group, 
# hence it is unlikely that an user who calls back will produce higer chargeback rate. 

